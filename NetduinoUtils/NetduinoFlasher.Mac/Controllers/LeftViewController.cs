// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using DfuSharp;
using System.Net.Http;
using System.Threading.Tasks;
using System.Diagnostics;
using Newtonsoft.Json.Linq;
using System.IO;
using System.Net;
using Ionic.Zip;
using NetduinoFlasher.Mac.Managers;

namespace NetduinoFlasher.Mac
{
	public partial class LeftViewController : NSViewController
	{
		public LeftViewController (IntPtr handle) : base (handle)
		{
		}
		private string firmwareStatusUrl = "http://www.netduino.com/firmware_version.json";

		protected int CurrentDeviceIndex { get; set; }
		protected int DeviceCount { get; set; }

		async public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			RefreshDeviceList();

			HttpClient client = new HttpClient();
			int retryCount = 0;
			string firmwareDownloadUrl = string.Empty;
			string firmwareVersion = string.Empty;
			string firmwareFilename = string.Empty;

			// check for firmware update
			while (true)
			{
				try
				{
					var json = await client.GetStringAsync(firmwareStatusUrl);
					var firmwareUpdate = JObject.Parse(json);
					firmwareDownloadUrl = firmwareUpdate["url"].ToString();
					firmwareFilename = Path.GetFileName(firmwareDownloadUrl);
					firmwareVersion = firmwareUpdate["version"].ToString();
					RaiseFirmwareVersionChecked(firmwareVersion);
					break;
				}
				catch (Exception ex)
				{
					retryCount++;
					await Task.Delay(10000);
				}
			}

			string appPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
			string workingPath = Path.Combine(appPath, "Netduino");
			if (!Directory.Exists(workingPath))
			{
				Directory.CreateDirectory(workingPath);
			}

			if (File.Exists(Path.Combine(workingPath, firmwareFilename)))
			{
				RaiseFirmwareVersionChecked(firmwareVersion);
			}
			else
			{
				// download firmware update
				while (true)
				{
					retryCount = 0;
					try
					{
						WebClient webClient = new WebClient();
						await webClient.DownloadFileTaskAsync(new Uri(firmwareDownloadUrl), Path.Combine(workingPath, firmwareFilename));
						Debug.WriteLine("downloaded");

						using (ZipFile zip = ZipFile.Read(Path.Combine(workingPath, firmwareFilename)))
						{
							zip.ExtractAll(workingPath);
						}

						RaiseFirmwareVersionChecked(firmwareVersion);
						break;
					}
					catch (Exception ex)
					{
						Debug.WriteLine("retrying download" + retryCount);
						retryCount++;
						await Task.Delay(10000);
					}
				}
			}
		}


		private void RefreshDeviceList()
		{
			// Create the Product Table Data Source and populate it
			var DataSource = new DeviceTableDataSource();

			DataSource.Devices.AddRange(DeviceManager.GetAttachedDevices());

			// Populate the Product Table
			DeviceList.DataSource = DataSource;
			DeviceList.Delegate = new DeviceTableDelegate(DataSource);

			DeviceCount = (int)DeviceList.RowCount;

			var storyboard = NSStoryboard.FromName("Main", null);
			for (int i = 0; i < DeviceCount; i++)
			{
				var controller = storyboard.InstantiateControllerWithIdentifier("RightViewController") as RightViewController;
				controller.DeviceIndex = i;
				((SplitViewController)this.ParentViewController).DeviceViewControllers.Add(i, controller);
			}

			if (DeviceList.RowCount > 0)
			{
				SelectDeviceIndex(0);
			}
		}

		partial void ClickDeviceList(Foundation.NSObject sender)
		{
			SelectDeviceIndex((int)((NSTableView)sender).SelectedRow);
		}

		void SelectDeviceIndex(int selectedIndex)
		{
			if (selectedIndex == -1) { selectedIndex = 0; }

			DeviceList.SelectRow(selectedIndex, false);
			if (selectedIndex != CurrentDeviceIndex)
			{
				CurrentDeviceIndex = selectedIndex;
				RaiseSelectedDeviceChanged(CurrentDeviceIndex);
			}
		}

		#region Events
		public delegate void SelectedDeviceChangedDelegate(int index);
		public event SelectedDeviceChangedDelegate SelectedDeviceChanged;

		internal void RaiseSelectedDeviceChanged(int index)
		{
			if (this.SelectedDeviceChanged != null)
				this.SelectedDeviceChanged(index);
		}

		public delegate void FirmwareVersionCheckedDelegate(string version);
		public event FirmwareVersionCheckedDelegate FirmwareVersionChecked;

		internal void RaiseFirmwareVersionChecked(string version)
		{
			if (this.FirmwareVersionChecked != null)
				this.FirmwareVersionChecked(version);
		}

		public delegate void FirmwareDownloadedDelegate(string version);
		public event FirmwareDownloadedDelegate FirmwareDownloaded;

		internal void RaiseFirmwareDownloadedChecked(string version)
		{
			if (this.FirmwareDownloaded != null)
				this.FirmwareDownloaded(version);
		}
		#endregion
	}
}
