// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Threading.Tasks;
using System.Diagnostics;
using NetduinoFlasher.Mac.Managers;

namespace NetduinoFlasher.Mac
{
	public partial class RightViewController : NSViewController
	{
		public RightViewController (IntPtr handle) : base (handle)
		{
			_firmwareManager = new FirmwareManager();
		}

		public int DeviceIndex { get; set; }
		FirmwareManager _firmwareManager;

		public override void ViewWillAppear()
		{
			base.ViewWillAppear();
			LoadGeneralDeviceInfo();
		}

		public void LoadGeneralDeviceInfo()
		{
			var devices = DeviceManager.GetAttachedDevices();
			if (devices.Count > 0)
			{
				var currentDevice = devices[DeviceIndex];
				if (currentDevice != null)
				{
					ManufacturerText.StringValue = currentDevice.Manufacturer;
					ModelText.StringValue = currentDevice.Product;
					ApplicationText.StringValue = DeviceIndex.ToString();
				}
				FirmwareVersionText.StringValue = "Version " + ((SplitViewController)ParentViewController).LatestFirmwareVersion;
				FirmwareUpdateButtonButton.Title = "Update Firmware";
			}

		}

		public void UpdateFirmwareVersionText(string version)
		{
			if (FirmwareVersionText != null)
			{
				FirmwareVersionText.StringValue = "Version " + version;
				FirmwareUpdateButtonButton.Title = "Update Firmware";
			}
		}

		async partial void FirmwareUpdateButton(Foundation.NSObject sender)
		{
			_firmwareManager.FirmwareUpdateProgress += (string status) =>
			{
				InvokeOnMainThread(() => FirmwareUpdateButtonButton.Title = "Updating... " + status + "%" );
			};

			FirmwareUpdateButtonButton.Enabled = false;
			FirmwareUpdateButtonButton.Title = "Updating...";

			await Task.Run(() =>
			{
				_firmwareManager.EraseAndUploadDevice(DeviceIndex, 9);
			});

			FirmwareUpdateButtonButton.Title = "Up to date";
		}

	}
}
